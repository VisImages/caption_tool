[{"ImageID": 0, "Page": 1, "Type": "Figure", "Imagebbox": [0.08898305084745763, 0.1569186011026072, 0.9279661016949152, 0.30905695611577966], "Caption": "Fig. 1. Hashedcubes accelerates queries used in a wide range of interactive exploratory visualizations, such as heatmaps, time series plots, histograms and binned scatterplots, and supports brushing and linking across spatial, categorical and temporal dimensions. In this figure, we show some example visualizations backed by Hashedcubes. The left image shows 210.6 million tweets from November 2011 to June 2012, highlighting the activity during Superbowl XLVI. The central image shows 24.5 million pick-up locations of NYC green taxis rides from January 2014 to June 2015. On the right, the visualizations show different aspects of 4.5 million Brightkite check-ins, a social network. Hashedcubes balances low memory usage, fast running times, and simple implementation; it allows interactive exploration of datasets that previously either required a prohibitive amount of memory or uncomfortably large latencies.", "DPI": 100, "CaptionBB": [74, 343, 723, 438], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 1, "Page": 3, "Type": "Figure", "Imagebbox": [0.05102040816326531, 0.051492244513459906, 0.9655612244897958, 0.33613445378151263], "Caption": "Fig. 2. Overall summary for building Hashedcubes. (a) Input dataset of points [p0 ,...,p9 ] under a spatial-categorical-temporal schema. The complete process is described in Section 3. (b) Step-by-step illustration of the process for building arrays of sorted partitions, as explained in Section 3.2. (c) Data is loaded (in any order) into a sequential memory and each record is associated with an index (rectangle in orange). The Hashedcubes construction algorithm executes multiple sorting phases that result in a array of sorted partitions. After building a Hashedcubes, every pivot delimits a partition. The stored Hashedcubes data structure is shown below. Its memory usage is mainly composed by pivots (each corresponding for two 32-bit integers) and attribute ranges (for the spatial dimension, the range is a 2-dimensional bounding box; for the categorical dimensions, the range is simply an integer value).", "DPI": 100, "CaptionBB": [40, 374, 757, 469], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 2, "Page": 4, "Type": "Figure", "Imagebbox": [0.4987244897959184, 0.051492244513459906, 0.9502551020408163, 0.1951447245564893], "Caption": "Fig. 4. Multiple spatial dimensions. In this example one quadtree is created for each of the two spatial dimensions, red and blue. The quadtrees are used alternately in Hashedcubes to partition the data.", "DPI": 100, "CaptionBB": [393, 223, 743, 265], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 3, "Page": 4, "Type": "Figure", "Imagebbox": [0.038135593220338986, 0.051492244513459906, 0.4851694915254237, 0.21583332978477773], "Caption": "Fig. 4. Multiple spatial dimensions. In this example one quadtree is created for each of the two spatial dimensions, red and blue. The quadtrees are used alternately in Hashedcubes to partition the data.", "DPI": 100, "CaptionBB": [393, 223, 743, 265], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 4, "Page": 5, "Type": "Figure", "Imagebbox": [0.05102040816326531, 0.054593019707258356, 0.4978813559322034, 0.18947674063749093], "Caption": "Fig. 5. Temporal dimension indexing. A period of time is represented by The current implementation of Hashedcubes uses a simple client-server", "DPI": 100, "CaptionBB": [41, 216, 756, 235], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 5, "Page": 6, "Type": "Table", "Imagebbox": [0.042091836734693876, 0.07376283846872082, 0.9400510204081632, 0.3127917833800187], "Caption": "Table 1. Subset of queries supported by Hashedcubes HTTP API.", "DPI": 100, "CaptionBB": [223, 64, 548, 80], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 6, "Page": 7, "Type": "Table", "Imagebbox": [0.05102040816326531, 0.07376283846872082, 0.9681122448979591, 0.2747480584669483], "Caption": "Table 2. Overall summary of the relevant information for building Hashedcubes.", "DPI": 100, "CaptionBB": [203, 64, 592, 80], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 7, "Page": 7, "Type": "Table", "Imagebbox": [0.05296610169491525, 0.617383717381677, 0.5021186440677966, 0.9011046476142351], "Caption": "Table 2. Overall summary of the relevant information for building Hashedcubes.", "DPI": 100, "CaptionBB": [203, 64, 592, 80], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 8, "Page": 8, "Type": "Figure", "Imagebbox": [0.5, 0.051492244513459906, 0.9502551020408163, 0.2754435107376284], "Caption": "Fig. 9. Hashedcubes supports recovering the original data by using a linking structure. Pivots represent the values from the SQL index, which allows to efficiently match all rows of a given query. Hashedcubes can be built directly from a SQL database or from an intermediary format.", "DPI": 100, "CaptionBB": [393, 307, 743, 362], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 9, "Page": 8, "Type": "Figure", "Imagebbox": [0.036016949152542374, 0.051492244513459906, 0.4830508474576271, 0.3786240274591963], "Caption": "Fig. 9. Hashedcubes supports recovering the original data by using a linking structure. Pivots represent the values from the SQL index, which allows to efficiently match all rows of a given query. Hashedcubes can be built directly from a SQL database or from an intermediary format.", "DPI": 100, "CaptionBB": [393, 307, 743, 362], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 10, "Page": 9, "Type": "Figure", "Imagebbox": [0.05102040816326531, 0.5779645191409897, 0.9655612244897958, 0.7264239028944911], "Caption": "Fig. 11. Los Angeles (United States) city view of detailed Brightkite heatmaps from recent data cube visualization proposals. Apart from the use of different colormaps across Hashedcubes, Nanocubes and imMens, what produces a slightly dissimilar visual appearance, Hashedcubes pivot concept enables a high visual accuracy along with reduced memory consumption when compared against other data cube visualization proposals. Notice that Hashedcubes matches Nanocubes visual representation, even though the latter does not experience leaf-size trade-offs.", "DPI": 100, "CaptionBB": [41, 787, 758, 842], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 11, "Page": 9, "Type": "Figure", "Imagebbox": [0.05102040816326531, 0.05304263211035913, 0.9655612244897958, 0.5191409897292251], "Caption": "Fig. 10. Hashedcubes different heatmap visualizations showcase. Notice the leaf size variation from 32 to 8 by looking into the highlighted regions. It impacts running time, memory usage and visual accuracy. (a) allows to identify truncated pivot occurrences by representing them as rectangles. Color is a factor of area and occupancy. (b) and (c) use circles to represent the center of an aggregated region (i.e., quadtree bounding box).", "DPI": 100, "CaptionBB": [41, 565, 758, 607], "first_confirmed": false, "second_confirmed": false}]