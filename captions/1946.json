[{"ImageID": 0, "Page": 2, "Type": "Figure", "Imagebbox": [0.4987309644670051, 0.17087208947470023, 0.9479695431472082, 0.3311627906976744], "Caption": "Fig. 1. Examples of primitive mark types. (a-h) Area; Bar; Dot; Image; Line; Label and Bar; Rule and Bar; Wedge.", "DPI": 100, "CaptionBB": [394, 370, 744, 397], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 1, "Page": 3, "Type": "Figure", "Imagebbox": [0.5152284263959391, 0.06604651162790698, 0.9543147208121827, 0.18511627906976744], "Caption": "Fig. 2. A simple bar chart visualization backed by Point2D objects.", "DPI": 100, "CaptionBB": [407, 209, 732, 223], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 2, "Page": 3, "Type": "Figure", "Imagebbox": [0.5152284263959391, 0.23255813953488372, 0.9543147208121827, 0.2911627906976744], "Caption": "Fig. 3. Adding interaction. Bars highlight red on mouse hover.", "DPI": 100, "CaptionBB": [407, 323, 710, 337], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 3, "Page": 3, "Type": "Figure", "Imagebbox": [0.5152284263959391, 0.33767441860465114, 0.9543147208121827, 0.533953488372093], "Caption": "Fig. 4. Adding animated behaviors to the bar chart.", "DPI": 100, "CaptionBB": [407, 584, 659, 598], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 4, "Page": 3, "Type": "Figure", "Imagebbox": [0.5169491525423728, 0.5804651162790697, 0.9631979695431472, 0.7166085235832274], "Caption": "Fig. 4. Adding animated behaviors to the bar chart.", "DPI": 100, "CaptionBB": [407, 584, 659, 598], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 5, "Page": 4, "Type": "Figure", "Imagebbox": [0.4987309644670051, 0.057693794901056805, 0.923728813559322, 0.18325581395348836], "Caption": "Fig. 7. Scenegraph resulting from the speci\ufb01cation in Figure 6.", "DPI": 100, "CaptionBB": [394, 216, 701, 230], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 6, "Page": 4, "Type": "Figure", "Imagebbox": [0.03389830508474576, 0.05614340730415758, 0.4851694915254237, 0.2747480584669483], "Caption": "Fig. 7. Scenegraph resulting from the speci\ufb01cation in Figure 6.", "DPI": 100, "CaptionBB": [394, 216, 701, 230], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 7, "Page": 5, "Type": "Figure", "Imagebbox": [0.5152284263959391, 0.061395348837209304, 0.9631979695431472, 0.2111627906976744], "Caption": "Fig. 8. Protovis on an Android mobile phone. The image sequence shows a touch-initiated animated scale transition in a scatter plot.", "DPI": 100, "CaptionBB": [407, 244, 757, 271], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 8, "Page": 6, "Type": "Figure", "Imagebbox": [0.06852791878172589, 0.4213953488372093, 0.9073604060913706, 0.5367441860465116], "Caption": "Fig. 11. Animated interpolation benchmarks by workload (# of elements). (a) Average performance improvement factor using single-threaded interpolation as a baseline (higher is better). (b) Average per-frame interpolation step time in ms, plotted on a log10 scale (lower is better).", "DPI": 100, "CaptionBB": [29, 594, 744, 622], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 9, "Page": 6, "Type": "Figure", "Imagebbox": [0.06852791878172589, 0.25116279069767444, 0.9010152284263959, 0.36186046511627906], "Caption": "Fig. 10. Rendering benchmarks for 50,000 elements by visualization type. (a) Average performance improvement factor using a single rendering thread (no worker threads) as a baseline (higher is better). (b) Average per-frame render time in ms (lower is better).", "DPI": 100, "CaptionBB": [29, 406, 744, 433], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 10, "Page": 6, "Type": "Figure", "Imagebbox": [0.05296610169491525, 0.06544573288555293, 0.923728813559322, 0.1869767441860465], "Caption": "Fig. 9. Encoding (bind-build-evaluate) benchmarks for 1,000,000 elements by evaluation strategy and thread count. (a) Average performance improvement factor using single-threaded evaluation as a baseline (higher is better). (b) Average encoding time in ms (lower is better).", "DPI": 100, "CaptionBB": [29, 218, 744, 245], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 11, "Page": 7, "Type": "Table", "Imagebbox": [0.5152284263959391, 0.6967441860465117, 0.9631979695431472, 0.7600193762964056], "Caption": "Table 1. Average frame rate of graph layout in frames/sec.", "DPI": 100, "CaptionBB": [439, 730, 724, 744], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 12, "Page": 7, "Type": "Figure", "Imagebbox": [0.05964467005076142, 0.48372093023255813, 0.4555084745762712, 0.5730232558139535], "Caption": "Fig. 12. Encoding time for 1,000,000 elements, by pruning strategy. nodes in a linear chain, with N varied from 100 to 100k by factors of Evaluators created via code-generation are used in each example. 10. We connected each node to the next 10 nodes in sequence; thus", "DPI": 100, "CaptionBB": [42, 615, 756, 645], "first_confirmed": false, "second_confirmed": false}]