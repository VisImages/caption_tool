[{"ImageID": 0, "Page": 2, "Type": "Figure", "Imagebbox": [0.08969465648854962, 0.45078671328671327, 0.42366412213740456, 0.5181395348837209], "Caption": "Figure 2. The Reference Model Pattern. A visualization manages visual models for one or more data sets, separating visual attributes (location, size, color, geometry, etc) from the abstract data. One or more views provide a graphical display of the visualization, while control modules process user input and may trigger updates at any level of the system.", "DPI": 100, "CaptionBB": [30, 570, 379, 628], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 1, "Page": 2, "Type": "Figure", "Imagebbox": [0.08206106870229007, 0.06477272727272727, 0.44656488549618323, 0.16837209302325581], "Caption": "Figure 1. Structural diagram legend. Classes are depicted as boxes, potentially listing attributes and method signatures. Abstract classes are titled 1.2 Data Column using italics. Arrows indicate relationships between classes. These relations include inheritance, denoted by a large empty triangle; object reference, Organize relational data into typed data columns, providing flexible denoted by an unadorned arrow; aggregation, denoted by a diamond base; and data representations and extensible data schemas.", "DPI": 100, "CaptionBB": [30, 182, 742, 240], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 2, "Page": 2, "Type": "Figure", "Imagebbox": [0.4987309644670051, 0.5081293706293706, 0.9454314720812182, 0.5925581395348837], "Caption": "Figure 3. The Data Column Pattern. Relational data tables are implemented as a collection of column objects. Data columns encapsulate data representation and can be shared among tables, propagating value updates using the Observer pattern [13]. A factory pattern can be used to facilitate column creation.", "DPI": 100, "CaptionBB": [394, 650, 742, 696], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 3, "Page": 3, "Type": "Figure", "Imagebbox": [0.6104060913705583, 0.18046511627906978, 0.8629441624365483, 0.26325581395348835], "Caption": "Figure 5. The Relational Graph Pattern. Network structures are implemented using relational data tables to represent node and edge data. Edge tables maintain foreign keys which reference incident nodes.", "DPI": 100, "CaptionBB": [406, 296, 755, 331], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 4, "Page": 3, "Type": "Figure", "Imagebbox": [0.13358778625954199, 0.3626748251748252, 0.42748091603053434, 0.4493881118881119], "Caption": "Figure 5. The Relational Graph Pattern. Network structures are implemented using relational data tables to represent node and edge data. Edge tables maintain foreign keys which reference incident nodes.", "DPI": 100, "CaptionBB": [406, 296, 755, 331], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 5, "Page": 4, "Type": "Figure", "Imagebbox": [0.5438931297709924, 0.7570804195804196, 0.9064885496183206, 0.8911627906976745], "Caption": "Figure 8. The Scheduler Pattern. Activity instances are registered with a centralized scheduler that runs the activities over a specified time interval, repeatedly running the activity at requested time steps.", "DPI": 100, "CaptionBB": [394, 971, 743, 1006], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 6, "Page": 4, "Type": "Figure", "Imagebbox": [0.5019083969465649, 0.06337412587412587, 0.9441624365482234, 0.1990697674418605], "Caption": "Figure 7. The Expression Pattern. Expression language statements are constructed as a tree of processing objects. Expressions perform calculations over data elements and return the result. Predicate expressions returning values of type boolean can be used to specify queries.", "DPI": 100, "CaptionBB": [394, 227, 742, 273], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 7, "Page": 4, "Type": "Figure", "Imagebbox": [0.05583756345177665, 0.26139534883720933, 0.46946564885496184, 0.4027906976744186], "Caption": "Figure 6. The Proxy Tuple Pattern. Tuples provide an object-oriented proxy use. For example, traversals of the tree can be used to identify for accessing a row of table data. The Node and Edge subclasses play a similar role for graphs, also enabling traversal of the network structure. referenced data fields, compute optimized query plans for a", "DPI": 100, "CaptionBB": [30, 432, 742, 462], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 8, "Page": 5, "Type": "Figure", "Imagebbox": [0.616751269035533, 0.12930232558139534, 0.8591370558375635, 0.23069767441860464], "Caption": "Figure 9. The Operator Pattern. Operators are modules that perform a specific processing action, updating the contents of a visualization in accordance with a data state model [8]. Possible operators include visual encodings (for size, shape, color, etc), spatial layout algorithms, visibility filters, and animated interpolation. Composite operators aggregate individual operators to enable sequential or conditional execution.", "DPI": 100, "CaptionBB": [406, 261, 755, 331], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 9, "Page": 6, "Type": "Figure", "Imagebbox": [0.5629770992366412, 0.4941433566433566, 0.8797709923664122, 0.5972093023255814], "Caption": "Figure 12. The Camera Pattern. A view component maintains an affine transformation matrix that is applied to visual items when rendering. The affine transform matrix can be used to specify translation, rotation, scale, and shearing transformations on the geometry of the view.", "DPI": 100, "CaptionBB": [394, 655, 743, 702], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 10, "Page": 6, "Type": "Figure", "Imagebbox": [0.03807106598984772, 0.7696678321678322, 0.46946564885496184, 0.8809302325581395], "Caption": "Figure 11. The Production Rule Pattern. A series of nested rules can be Dynamic rendering behavior can be implemented in a modular and used to return individual values that meet desired conditions. extensible manner using the Renderer pattern (\u00a72.9). Animated view", "DPI": 100, "CaptionBB": [30, 946, 742, 973], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 11, "Page": 6, "Type": "Figure", "Imagebbox": [0.03680203045685279, 0.18924825174825174, 0.47137404580152675, 0.2855813953488372], "Caption": "Figure 10. The Renderer Pattern. The mapping between items and their default (e.g., a nominal color encoding based upon a data attribute). visual appearance is determined using Renderer modules, responsible for Both of these approaches are used within the prefuse toolkit [14]. drawing, interior point testing, and bounds calculation. A RendererFactory can be used to assign Renderers to items based on current conditions, such as data 1.11 Camera attribute values or the zoom level.", "DPI": 100, "CaptionBB": [30, 306, 742, 371], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 12, "Page": 7, "Type": null, "Imagebbox": [0.09351145038167939, 0.5081293706293706, 0.46564885496183206, 0.6395979020979021], "Caption": null, "DPI": null, "CaptionBB": null, "first_confirmed": false, "second_confirmed": false}, {"ImageID": 13, "Page": 8, "Type": "Figure", "Imagebbox": [0.03680203045685279, 0.08994755244755245, 0.9441624365482234, 0.4790697674418605], "Caption": "Figure 14. Design Pattern Relationships. The network depicts interactions between design patterns, intending a more holistic pattern of how the various patterns apply or mutually reinforce each other. Patterns with italicized text (e.g., Flyweight) are taken from Gamma et al. [13]; those with a standard typeface were introduced in this paper. To simplify the diagram, patterns used extensively by the visualization patterns (e.g., Observer) have been omitted.", "DPI": 100, "CaptionBB": [35, 533, 720, 568], "first_confirmed": false, "second_confirmed": false}]