[{"ImageID": 0, "Page": 1, "Type": "Figure", "Imagebbox": [0.07525510204081633, 0.12313895781637717, 0.9426020408163265, 0.3818860877684407], "Caption": "Fig. 1. DXR enables rapid prototyping of immersive data visualizations: (b,c) declarative specifications concisely represent visualizations; (a:right) DXR\u2019s graphical user interface (GUI) within the virtual world enables quick iteration over visualization parameters such as data sources, graphical marks, and visual encodings; (b) the GUI modifies the underlying design specifications; (c) specifications can be fine-tuned by the designer in a text editor; (d) the designer can add 3D models as custom graphical marks to achieve (e) novel immersive visualization designs. Example visualizations built using DXR: (f) a 3D vector field plot showing locations of photographs of an exhibit; (g) flames representing the remaining lifetime of real-world organic materials as they decay; (h) bar charts and scatter plots embedding sports data in a virtual basketball court; and (i) coins showing Bitcoin prices in a 3D game.", "DPI": 100, "CaptionBB": [73, 421, 723, 516], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 1, "Page": 2, "Type": "Figure", "Imagebbox": [0.4987244897959184, 0.34398263027295284, 0.951530612244898, 0.3936104218362283], "Caption": "Fig. 2. Inspired by (top) 2D JavaScript-based authoring tools, (bottom) DXR offers multiple high-level interfaces that are easier to learn and use than low-level Unity programming for constructing visualizations.", "DPI": 100, "CaptionBB": [392, 424, 742, 466], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 2, "Page": 3, "Type": "Figure", "Imagebbox": [0.058673469387755105, 0.477124183006536, 0.5050847457627119, 0.5592903828197946], "Caption": "fication, DXR then programmatically constructs the 3D visualization Fig. 3. DXR overview: A vis-specs file references the data file and that the designer can place in a real or virtual immersive scene. holds the design declaration. It gets interpreted by DXR to generate a visualization that is represented as a vis-prefab GameObject in Unity. 4.1 Design Specification", "DPI": 100, "CaptionBB": [40, 598, 755, 651], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 3, "Page": 3, "Type": "Figure", "Imagebbox": [0.5153061224489796, 0.04855275443510738, 0.9655612244897959, 0.25583566760037346], "Caption": "Fig. 4. Steps to use a template: 1) drag-and-drop vis-prefab to the scene, 2) set the vis-specs filename, 3) run, and tweak parameters in the GUI.", "DPI": 100, "CaptionBB": [405, 286, 756, 315], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 4, "Page": 4, "Type": "Figure", "Imagebbox": [0.03571428571428571, 0.05614143920595534, 0.9502551020408163, 0.2586367880485528], "Caption": "Fig. 5. DXR\u2019s visualization pipeline. The designer specifies the visualization design via concise specifications. Then DXR infers missing parameters to sensible defaults and uses the inferred specifications to programmatically construct a 3D visualization that can be placed in an AR or VR scene.", "DPI": 100, "CaptionBB": [28, 291, 745, 320], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 5, "Page": 5, "Type": "Figure", "Imagebbox": [0.05102040816326531, 0.29971988795518206, 0.9655612244897958, 0.5014005602240896], "Caption": "Fig. 7. Prototyping with DXR typically involves (left) trying combinations of data, graphical mark, and visual encoding parameters using the in-situ GUI on an immersive device, and (right) fine-tuning design specifications using a text editor running side-by-side with the Unity Editor on a computer.", "DPI": 100, "CaptionBB": [40, 549, 756, 578], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 6, "Page": 5, "Type": "Figure", "Imagebbox": [0.05102040816326531, 0.04855275443510738, 0.9655612244897958, 0.21942110177404295], "Caption": "Fig. 6. DXR supports interactive query filters and linked views. For visualized data attributes (e.g., Horsepower, Origin), threshold and toggle filters can be directly integrated into their axis and legend, respectively (left: purple highlights). For non-visualized attributes (e.g., Cylinders, Weight in lbs), filters can be enumerated using the interaction parameter (right: blue highlight) and appear on the side. Visualizations that use the same data within the same scene can be linked so that only data items satisfying queries are shown across all linked views (orange highlights).", "DPI": 100, "CaptionBB": [40, 247, 757, 302], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 7, "Page": 6, "Type": "Figure", "Imagebbox": [0.4987244897959184, 0.04621588089330025, 0.9502551020408163, 0.33986928104575165], "Caption": "Fig. 8. (a) In addition to DXR\u2019s built-in generic graphical marks, (b) designers can use any Unity prefab as a custom mark with generic visual channels such as position, size, and color, simply by saving it in a designated directory. (c) Additional channels can be implemented in a derived class to expose other prefab properties to DXR\u2019s visual encoding process. Custom marks and channels enable flexible designs, such as (d) bookshelf keywords visualized using virtual books as bars, and (e) forest fires visualized using flame particle systems on a virtual map.", "DPI": 100, "CaptionBB": [392, 376, 743, 484], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 8, "Page": 7, "Type": "Figure", "Imagebbox": [0.5165816326530612, 0.04855275443510738, 0.9655612244897959, 0.1503267973856209], "Caption": "Fig. 9. Prototypes for (a,b) forest fire and (c) milk data visualizations.", "DPI": 100, "CaptionBB": [405, 173, 742, 189], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 9, "Page": 7, "Type": "Figure", "Imagebbox": [0.04915254237288136, 0.04621588089330025, 0.5016949152542373, 0.2683002481389578], "Caption": "Fig. 9. Prototypes for (a,b) forest fire and (c) milk data visualizations.", "DPI": 100, "CaptionBB": [405, 173, 742, 189], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 10, "Page": 8, "Type": "Figure", "Imagebbox": [0.03443877551020408, 0.041253101736972705, 0.9502551020408163, 0.8842203548085901], "Caption": "Fig. 10. Examples of immersive visualizations built using DXR include (a) embedded representations, (b, c, d, e, f) 2D and 3D information and geospatial data visualizations, (c, d) immersive workspaces, and (g, h) 3D flow fields and streamlines. Prototyping each example took 10-30 minutes using DXR\u2019s GUI and grammar-based interfaces. Custom graphical marks are based on Asset Store prefabs and 3D models from on-line repositories. All examples presented in this paper are available on the DXR website as templates for designers.", "DPI": 100, "CaptionBB": [27, 959, 744, 1014], "first_confirmed": false, "second_confirmed": false}, {"ImageID": 11, "Page": 9, "Type": "Figure", "Imagebbox": [0.07653061224489796, 0.04855275443510738, 0.9426020408163265, 0.24276377217553688], "Caption": "Fig. 11. (left) Construction times and (right) frame rates as a function of data size running on Unity Desktop, HoloLens (HL), and ACER VR headset (VR). Lines show visualizations that use simple (cube, cone) or complex (fire, arrow) graphical marks. X marks show other examples from this paper.", "DPI": 100, "CaptionBB": [40, 272, 757, 301], "first_confirmed": false, "second_confirmed": false}]